#!/bin/bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

enable_color_support() {
    #declare DOTFILES_DIR_PATH="$(dirname $(dirname $(readlink $BASH_SOURCE)))"

    if [[ $COLORTERM == gnome-* && $TERM == xterm ]] && infocmp gnome-256color &> /dev/null; then
        export TERM='gnome-256color'
    elif infocmp xterm-256color &> /dev/null; then
        export TERM='xterm-256color'
    fi
}

is_git_repo() {
    git rev-parse --is-inside-work-tree &> /dev/null
}

get_git_branch() {
    local branch_name

    # Get the short symbolic ref
    branch_name=$(command git symbolic-ref --quiet --short HEAD 2> /dev/null) ||
    # If HEAD isn't a symbolic ref, get the short SHA
    branch_name=$(command git rev-parse --short HEAD 2> /dev/null) ||
    # Otherwise, just give up
    branch_name="(unknown)"

    echo $branch_name
}

# Git status information
function prompt_git() {
    local git_info git_state uc us ut st

    if ! is_git_repo; then
        return 1
    fi

    git_info=$(get_git_branch)

    # Check for uncommitted changes in the index
    if ! `command git diff --quiet --ignore-submodules --cached`; then
        uc="+"
    fi

    # Check for unstaged changes
    if ! `command git diff-files --quiet --ignore-submodules --`; then
        us="!"
    fi

    # Check for untracked files
    if [ -n "$(command git ls-files --others --exclude-standard)" ]; then
        ut="?"
    fi

    # Check for stashed files
    if `command git rev-parse --verify refs/stash &>/dev/null`; then
        st="$"
    fi

    git_state=$uc$us$ut$st

    # Combine the branch name and state information
    if [[ $git_state ]]; then
        git_info="$git_info[$git_state]"
    fi

    printf " on ${YELLOW}git:${git_info}"
}

set_prompts() {
    local black='' blue='' bold='' cyan='' green='' orange='' \
          purple='' red='' reset='' white='' yellow=''

    if [ -x /usr/bin/tput ] && tput setaf 1 &> /dev/null; then
        tput sgr0 # Reset colors

        bold=$(tput bold)
        reset=$(tput sgr0)

        # Solarized colors
        # https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized#the-values
        black=$(tput setaf 0)
        blue=$(tput setaf 33)
        cyan=$(tput setaf 37)
        green=$(tput setaf 64)
        orange=$(tput setaf 166)
        magenta=$(tput setaf 9)
        purple=$(tput setaf 125)
        red=$(tput setaf 124)
        white=$(tput setaf 15)
        yellow=$(tput setaf 136)
    else
        bold=''
        reset="\e[0m"

        black="\e[1;30m"
        blue="\e[1;34m"
        cyan="\e[1;36m"
        green="\e[1;32m"
        magenta="\e[1;31m"
        orange="\e[1;33m"
        purple="\e[1;35m"
        red="\e[1;31m"
        white="\e[1;37m"
        yellow="\e[1;33m"
    fi

    # Highlight the user name when logged in as root.
    if [[ "${USER}" == "root" ]]; then
    	userStyle="${red}";
    else
    	userStyle="${orange}";
    fi;
    
    # Highlight the hostname when connected via SSH.
    if [[ "${SSH_TTY}" ]]; then
    	hostStyle="${bold}${red}";
    else
    	hostStyle="${yellow}";
    fi;

    # Prompt Statement variables
    # http://ss64.com/bash/syntax-prompt.html

    # ------------------------------------------------------------------
    # | PS1 - Default interactive prompt                               |
    # ------------------------------------------------------------------
    symbol="λ "

    PS1="\[\033]0;\w\007\]";
    PS1+="\[${bold}${white}\]$symbol"                   # newline
    PS1+="\[${userStyle}\]\u \[$white\]"                # username
    PS1+="at \[$hostStyle\]\h \[$white\]"               # host
    PS1+="in \[$green\]\${PWD/#\$HOME/~}\[$white\]"     # Working directory
    PS1+="\$(prompt_git)\[$white\]"                     # Git repository details
    PS1+="\n → \[$reset\]"

    export PS1

    # ------------------------------------------------------------------
    # | PS2 - Continuation interactive prompt                          |
    # ------------------------------------------------------------------
    PS2="\[$orange\]⚡ \[$reset\]"

    export PS2

#    # ------------------------------------------------------------------
#    # | PS4 - Debug prompt                                             |
#    # ------------------------------------------------------------------
#
#    # e.g:
#    #
#    # The GNU `date` command has the `%N` interpreted sequence while
#    # other implementations don't (on OS X `gdate` can be used instead
#    # of the native `date` if the `coreutils` package was installed)
#    #
#    # local dateCmd=""
#    #
#    # if [ "$(date +%N)" != "N" ] || \
#    #    [ ! -x "$(command -v 'gdate')" ]; then
#    #    dateCmd="date +%s.%N"
#    # else
#    #    dateCmd="gdate +%s.%N"
#    # fi
#    #
#    # PS4="+$( tput cr && tput cuf 6 &&
#    #          printf "$yellow %s $green%6s $reset" "$($dateCmd)" "[$LINENO]" )"
#    #
#    # PS4 output:
#    #
#    #   ++    1357074705.875970000  [123] '[' 1 == 0 ']'
#    #   └──┬─┘└────┬───┘ └───┬───┘ └──┬─┘ └──────┬─────┘
#    #      │       │         │        │          │
#    #      │       │         │        │          └─ command
#    #      │       │         │        └─ line number
#    #      │       │         └─ nanoseconds
#    #      │       └─ seconds since 1970-01-01 00:00:00 UTC
#    #      └─ depth-level of the subshell
#
#    PS4="+$( tput cr && tput cuf 6 && printf "%s $reset" )"
#
#    export PS4

    # PS4 for debugging purposes written intially by awesome @janmoesen for `tilde`
    # Include the current file and line number when tracing using "set -x". (You
    # can also include "\$FUNCNAME" to get the currently executing function, if
    # any.)
    ps4_parts=(
        # Same as the default: start with a plus sign that gets repeated based on
        # the current stack depth. (Bash repeats the first character of PS4.)
        '+ '
    
        # Make the following extra information stand out less.
        "${magenta}${bold}"
    
        # Show the name of the current shell function, if any.
        '${FUNCNAME}'
    
        # Show the basename and line number of the source file or function, if
        # any. If there was a function name, put an "@" between the function name
        # and the file/function.
        '${BASH_SOURCE:+${FUNCNAME:+@}}'
    
        "${orange}"
    
        # Note that LINENO is reset from 1 inside a function body. Sometimes,
        # $LINENO is a negative number. I could not find any reference to this in
        # the man page, but it seems to have to happen when returning from another
        # function. Until I understand this more completely, I wrap it in
        # parentheses to clarify that it is not a regular line number.
        '${BASH_SOURCE:+${BASH_SOURCE##*/}:${LINENO/#-*/($LINENO)}}'
    
        # Use a tab to separate the file/function and line number from the actual
        # line of code, rather than a space, because this helps legibility. (It
        # decreases the "jaggedness" caused by differing lengthts of file names
        # and line numbers.) I prefer this to a newline because it keeps the trace
        # more compact.
        $'\t'
    
        # Reset the colour and style.
        "${reset}"
    )
    printf -v PS4 '%s' "${ps4_parts[@]}"
    export PS4
    unset ps4_parts
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

main() {
    enable_color_support
    set_prompts
}

main

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Cleanup

unset -f enable_color_support
unset -f main
unset -f set_prompts
